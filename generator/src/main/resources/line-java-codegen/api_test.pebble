{# @pebvariable name="imports" type="java.util.List<java.util.Map<String, String>>" -#}
{# @pebvariable name="operations" type="org.openapitools.codegen.model.OperationMap" -#}
{# @pebvariable name="generatorClass" type="java.lang.String" -#}
{# @pebvariable name="classname" type="java.lang.String" -#}
{# @pebvariable name="authMethods" type="java.util.ArrayList<org.openapitools.codegen.CodegenSecurity>" -#}
{% include "./licenseInfo.pebble" %}

package {# @pebvariable name="package" type="java.lang.String" -#}{{package}};

import static org.assertj.core.api.Assertions.assertThat;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.configureFor;
import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
import static com.github.tomakehurst.wiremock.client.WireMock.put;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.delete;
import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathTemplate;
import static com.github.tomakehurst.wiremock.client.WireMock.verify;
import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;

import com.linecorp.bot.client.base.BlobContent;
import com.linecorp.bot.client.base.UploadFile;

import java.net.URI;

import java.util.Map;

{% if classname == "MessagingApiClient" or classname == "MessagingApiBlobClient" %}
import com.linecorp.bot.messaging.model.TextMessage;
{% endif %}

{% for import in imports -%}
import {{import.import}};
{% endfor %}
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.bridge.SLF4JBridgeHandler;

import com.ocadotechnology.gembus.test.Arranger;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import com.github.tomakehurst.wiremock.WireMockServer;

/**
* API tests for {{classname}}
*/
@Timeout(5)
public class {{classname}}Test {
    static {
        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();
    }

    private WireMockServer wireMockServer;
    private {{classname}} api;

    @BeforeEach
    public void setUp() {
        wireMockServer = new WireMockServer(wireMockConfig().dynamicPort());
        wireMockServer.start();
        configureFor("localhost", wireMockServer.port());


        api = {{classname}}.builder({% if authMethods != null %}"MY_OWN_TOKEN"{% endif %})
            .apiEndPoint(URI.create(wireMockServer.baseUrl()))
            .build();
    }

    @AfterEach
    public void tearDown() {
        wireMockServer.stop();
    }

{% for op in operations.operation -%}
    @Test
    public void {{op.operationId}}Test() {
        stubFor({{op.httpMethod|lower}}(urlPathTemplate("{{op.path}}")).willReturn(
            aResponse()
                .withStatus(200)
                .withHeader("content-type", "application/json")
                .withBody("{}")));

    {% for param in op.allParams -%}
        {% if param.isFile %}
            UploadFile {{param.paramName}} = UploadFile.fromString("HELLO_FILE", "text/plain");
        {% else %}
            {{param.dataType}} {{param.paramName}} = Arranger.some({{param.dataType}}.class{% if classname == "MessagingApiClient" or classname == "MessagingApiBlobClient" %}, Map.of("message", () -> new TextMessage("hello"), "recipient", () -> null, "filter", () -> null){% endif %});
        {% endif %}
    {% endfor %}

    {% if op.returnType %}{% if op.isResponseFile %}BlobContent{% else %}{{ op.returnType }}{% endif %} response = {% endif %}api.{{op.operationId}}({% for param in op.allParams %}{{param.paramName}}{% if not loop.last %}, {% endif %}{% endfor %}).join().body();

    {% if op.returnType %}
        assertThat(response).isNotNull();
    {% endif %}
        // TODO: test validations
    }

{% endfor %}
}
