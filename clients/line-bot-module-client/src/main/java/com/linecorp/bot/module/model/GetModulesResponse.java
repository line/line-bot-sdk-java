/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.module.model;



import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * List of bots to which the module is attached
 *
 * @see <a href="https://developers.line.biz/en/reference/partner-docs/#get-multiple-bot-info-api">
 *     Documentation</a>
 */
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record GetModulesResponse(
    /** Array of Bot list Item objects representing basic information about the bot. */
    @JsonProperty("bots") List<ModuleBot> bots,
    /**
     * Continuation token. Used to get the next array of basic bot information. This property is
     * only returned if there are more unreturned results.
     */
    @JsonProperty("next") String next) {

  public static class Builder {
    private List<ModuleBot> bots;

    private boolean bots$set;

    private String next;

    public Builder() {}

    public Builder bots(List<ModuleBot> bots) {
      this.bots = bots;

      this.bots$set = true;

      return this;
    }

    public Builder next(String next) {
      this.next = next;

      return this;
    }

    public GetModulesResponse build() {

      if (!this.bots$set) {
        throw new IllegalStateException("'bots' must be set for GetModulesResponse.");
      }

      return new GetModulesResponse(bots, next);
    }
  }
}
