/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.module.model;



import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * basic information about the bot.
 *
 * @see <a href="https://developers.line.biz/en/reference/partner-docs/#get-multiple-bot-info-api">
 *     Documentation</a>
 */
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record ModuleBot(
    /** Bot&#39;s user ID */
    @JsonProperty("userId") String userId,
    /** Bot&#39;s basic ID */
    @JsonProperty("basicId") String basicId,
    /** Bot&#39;s premium ID. Not included in the response if the premium ID isn&#39;t set. */
    @JsonProperty("premiumId") String premiumId,
    /** Bot&#39;s display name */
    @JsonProperty("displayName") String displayName,
    /**
     * Profile image URL. Image URL starting with &#x60;https://&#x60;. Not included in the response
     * if the bot doesn&#39;t have a profile image.
     */
    @JsonProperty("pictureUrl") String pictureUrl) {

  public static class Builder {
    private String userId;

    private boolean userId$set;

    private String basicId;

    private boolean basicId$set;

    private String premiumId;

    private String displayName;

    private boolean displayName$set;

    private String pictureUrl;

    public Builder() {}

    public Builder userId(String userId) {
      this.userId = userId;

      this.userId$set = true;

      return this;
    }

    public Builder basicId(String basicId) {
      this.basicId = basicId;

      this.basicId$set = true;

      return this;
    }

    public Builder premiumId(String premiumId) {
      this.premiumId = premiumId;

      return this;
    }

    public Builder displayName(String displayName) {
      this.displayName = displayName;

      this.displayName$set = true;

      return this;
    }

    public Builder pictureUrl(String pictureUrl) {
      this.pictureUrl = pictureUrl;

      return this;
    }

    public ModuleBot build() {

      if (!this.userId$set) {
        throw new IllegalStateException("'userId' must be set for ModuleBot.");
      }

      if (!this.basicId$set) {
        throw new IllegalStateException("'basicId' must be set for ModuleBot.");
      }

      if (!this.displayName$set) {
        throw new IllegalStateException("'displayName' must be set for ModuleBot.");
      }

      return new ModuleBot(userId, basicId, premiumId, displayName, pictureUrl);
    }
  }
}
