/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.linecorp.bot.messaging.model;

import java.time.Instant;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;



/**
 * ImagemapArea
 */

@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record ImagemapArea (
/**
    * Get x
    */
    
    @JsonProperty("x")
    Integer x,
/**
    * Get y
    */
    
    @JsonProperty("y")
    Integer y,
/**
    * Get width
    */
    
    @JsonProperty("width")
    Integer width,
/**
    * Get height
    */
    
    @JsonProperty("height")
    Integer height

)  {


    public static class Builder {
private Integer x;
    
        private boolean x$set;
    
private Integer y;
    
        private boolean y$set;
    
private Integer width;
    
        private boolean width$set;
    
private Integer height;
    
        private boolean height$set;
    


        public Builder() {
        }

public Builder x(Integer x) {
            this.x = x;
    
            this.x$set = true;
    
            return this;
        }
public Builder y(Integer y) {
            this.y = y;
    
            this.y$set = true;
    
            return this;
        }
public Builder width(Integer width) {
            this.width = width;
    
            this.width$set = true;
    
            return this;
        }
public Builder height(Integer height) {
            this.height = height;
    
            this.height$set = true;
    
            return this;
        }


        public ImagemapArea build() {

            if (!this.x$set) {
                throw new IllegalStateException("'x' must be set for ImagemapArea.");
            }
    

            if (!this.y$set) {
                throw new IllegalStateException("'y' must be set for ImagemapArea.");
            }
    

            if (!this.width$set) {
                throw new IllegalStateException("'width' must be set for ImagemapArea.");
            }
    

            if (!this.height$set) {
                throw new IllegalStateException("'height' must be set for ImagemapArea.");
            }
    


            return new ImagemapArea(
x,y,width,height
            );
        }
    }
}
