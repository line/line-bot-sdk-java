/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.messaging.model;



import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.net.URI;
import java.util.List;

/**
 * ImagemapMessage
 *
 * @see <a href="https://developers.line.biz/en/reference/messaging-api/#imagemap-message">
 *     Documentation</a>
 */
@JsonTypeName("imagemap")
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record ImagemapMessage(
    /** Get quickReply */
    @JsonProperty("quickReply") QuickReply quickReply,
    /** Get sender */
    @JsonProperty("sender") Sender sender,
    /** Get baseUrl */
    @JsonProperty("baseUrl") URI baseUrl,
    /** Get altText */
    @JsonProperty("altText") String altText,
    /** Get baseSize */
    @JsonProperty("baseSize") ImagemapBaseSize baseSize,
    /** Get actions */
    @JsonProperty("actions") List<ImagemapAction> actions,
    /** Get video */
    @JsonProperty("video") ImagemapVideo video)
    implements Message {

  public static class Builder {
    private QuickReply quickReply;

    private Sender sender;

    private URI baseUrl;

    private boolean baseUrl$set;

    private String altText;

    private boolean altText$set;

    private ImagemapBaseSize baseSize;

    private boolean baseSize$set;

    private List<ImagemapAction> actions;

    private boolean actions$set;

    private ImagemapVideo video;

    public Builder() {}

    public Builder quickReply(QuickReply quickReply) {
      this.quickReply = quickReply;

      return this;
    }

    public Builder sender(Sender sender) {
      this.sender = sender;

      return this;
    }

    public Builder baseUrl(URI baseUrl) {
      this.baseUrl = baseUrl;

      this.baseUrl$set = true;

      return this;
    }

    public Builder altText(String altText) {
      this.altText = altText;

      this.altText$set = true;

      return this;
    }

    public Builder baseSize(ImagemapBaseSize baseSize) {
      this.baseSize = baseSize;

      this.baseSize$set = true;

      return this;
    }

    public Builder actions(List<ImagemapAction> actions) {
      this.actions = actions;

      this.actions$set = true;

      return this;
    }

    public Builder video(ImagemapVideo video) {
      this.video = video;

      return this;
    }

    public ImagemapMessage build() {

      if (!this.baseUrl$set) {
        throw new IllegalStateException("'baseUrl' must be set for ImagemapMessage.");
      }

      if (!this.altText$set) {
        throw new IllegalStateException("'altText' must be set for ImagemapMessage.");
      }

      if (!this.baseSize$set) {
        throw new IllegalStateException("'baseSize' must be set for ImagemapMessage.");
      }

      if (!this.actions$set) {
        throw new IllegalStateException("'actions' must be set for ImagemapMessage.");
      }

      return new ImagemapMessage(quickReply, sender, baseUrl, altText, baseSize, actions, video);
    }
  }
}
