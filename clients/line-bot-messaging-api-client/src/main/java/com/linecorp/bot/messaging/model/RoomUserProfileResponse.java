/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.messaging.model;



import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.URI;

/**
 * RoomUserProfileResponse
 *
 * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile">
 *     Documentation</a>
 */
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record RoomUserProfileResponse(
    /** User&#39;s display name */
    @JsonProperty("displayName") String displayName,
    /** User ID */
    @JsonProperty("userId") String userId,
    /**
     * Profile image URL. &#x60;https&#x60; image URL. Not included in the response if the user
     * doesn&#39;t have a profile image.
     */
    @JsonProperty("pictureUrl") URI pictureUrl) {

  public static class Builder {
    private String displayName;

    private boolean displayName$set;

    private String userId;

    private boolean userId$set;

    private URI pictureUrl;

    public Builder() {}

    public Builder displayName(String displayName) {
      this.displayName = displayName;

      this.displayName$set = true;

      return this;
    }

    public Builder userId(String userId) {
      this.userId = userId;

      this.userId$set = true;

      return this;
    }

    public Builder pictureUrl(URI pictureUrl) {
      this.pictureUrl = pictureUrl;

      return this;
    }

    public RoomUserProfileResponse build() {

      if (!this.displayName$set) {
        throw new IllegalStateException("'displayName' must be set for RoomUserProfileResponse.");
      }

      if (!this.userId$set) {
        throw new IllegalStateException("'userId' must be set for RoomUserProfileResponse.");
      }

      return new RoomUserProfileResponse(displayName, userId, pictureUrl);
    }
  }
}
