/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.linecorp.bot.messaging.model;

import java.time.Instant;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;

import com.fasterxml.jackson.annotation.JsonEnumDefaultValue;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

import com.linecorp.bot.messaging.model.Action;
import com.linecorp.bot.messaging.model.Template;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * ConfirmTemplate
 */
@JsonTypeName("confirm")

@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record ConfirmTemplate (
/**
    * Get text
    */
    
    @JsonProperty("text")
    String text,
/**
    * Get actions
    */
    
    @JsonProperty("actions")
    List<Action> actions

) implements Template {


    public static class Builder {
private String text;
    
        private boolean text$set;
    
private List<Action> actions;
    
        private boolean actions$set;
    


        public Builder() {
        }

public Builder text(String text) {
            this.text = text;
    
            this.text$set = true;
    
            return this;
        }
public Builder actions(List<Action> actions) {
            this.actions = actions;
    
            this.actions$set = true;
    
            return this;
        }


        public ConfirmTemplate build() {

            if (!this.text$set) {
                throw new IllegalStateException("'text' must be set for ConfirmTemplate.");
            }
    

            if (!this.actions$set) {
                throw new IllegalStateException("'actions' must be set for ConfirmTemplate.");
            }
    


            return new ConfirmTemplate(
text,actions
            );
        }
    }
}
