/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.messaging.model;



import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** URIImagemapAction */
@JsonTypeName("uri")
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record URIImagemapAction(
    /** Get area */
    @JsonProperty("area") ImagemapArea area,
    /** Get linkUri */
    @JsonProperty("linkUri") String linkUri,
    /** Get label */
    @JsonProperty("label") String label)
    implements ImagemapAction {

  public static class Builder {
    private ImagemapArea area;

    private boolean area$set;

    private String linkUri;

    private boolean linkUri$set;

    private String label;

    public Builder() {}

    public Builder area(ImagemapArea area) {
      this.area = area;

      this.area$set = true;

      return this;
    }

    public Builder linkUri(String linkUri) {
      this.linkUri = linkUri;

      this.linkUri$set = true;

      return this;
    }

    public Builder label(String label) {
      this.label = label;

      return this;
    }

    public URIImagemapAction build() {

      if (!this.area$set) {
        throw new IllegalStateException("'area' must be set for URIImagemapAction.");
      }

      if (!this.linkUri$set) {
        throw new IllegalStateException("'linkUri' must be set for URIImagemapAction.");
      }

      return new URIImagemapAction(area, linkUri, label);
    }
  }
}
