/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.messaging.model;


import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.Map;

/**
 * TextMessageV2
 *
 * @see <a href="https://developers.line.biz/en/reference/messaging-api/#text-message-v2">
 *     Documentation</a>
 */
@JsonTypeName("textV2")
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record TextMessageV2(
    /** Get quickReply */
    @JsonProperty("quickReply") QuickReply quickReply,
    /** Get sender */
    @JsonProperty("sender") Sender sender,
    /** Get text */
    @JsonProperty("text") String text,
    /**
     * A mapping that specifies substitutions for parts enclosed in {} within the &#39;text&#39;
     * field.
     */
    @JsonProperty("substitution") Map<String, SubstitutionObject> substitution,
    /** Quote token of the message you want to quote. */
    @JsonProperty("quoteToken") String quoteToken)
    implements Message {

  public static class Builder {
    private QuickReply quickReply;
    private Sender sender;
    private String text;
    private Map<String, SubstitutionObject> substitution;
    private String quoteToken;

    public Builder(String text) {

      this.text = text;
    }

    public Builder quickReply(QuickReply quickReply) {
      this.quickReply = quickReply;
      return this;
    }

    public Builder sender(Sender sender) {
      this.sender = sender;
      return this;
    }

    public Builder substitution(Map<String, SubstitutionObject> substitution) {
      this.substitution = substitution;
      return this;
    }

    public Builder quoteToken(String quoteToken) {
      this.quoteToken = quoteToken;
      return this;
    }

    public TextMessageV2 build() {
      return new TextMessageV2(quickReply, sender, text, substitution, quoteToken);
    }
  }
}
