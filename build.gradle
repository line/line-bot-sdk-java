/*
 * Copyright 2016 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import com.github.spotbugs.snom.SpotBugsTask
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.springframework.boot.gradle.plugin.SpringBootPlugin

// ./gradlew clean && ./gradlew uploadArchives -Prelease

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "com.puppycrawl.tools:checkstyle:10.3.1"
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.9"
        classpath "io.franzbecker:gradle-lombok:5.0.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.12.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0"
    }
}

apply(plugin: "idea")
apply(plugin: "jacoco")

group = "com.linecorp.bot"
version = "4.10.0"

//set build variables based on build type (release, continuous integration, development)
def isReleaseBuild
def sonatypeRepositoryUrl
if (hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("ci")) {
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
}

allprojects {
    repositories {
        mavenCentral();
    }
}

subprojects {
    apply(plugin: "com.github.spotbugs")
    apply(plugin: "java-library")
    apply(plugin: "checkstyle")
    apply(plugin: "io.franzbecker.gradle-lombok")
    apply(plugin: "io.spring.dependency-management")

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = rootProject.group
    version = rootProject.version

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency("com.google.guava:guava:30.0-jre")
            dependency("com.github.stefanbirkner:system-lambda:1.2.1")
            dependency("com.github.tomakehurst:wiremock-jre8:2.33.2")
            dependencySet(group: "com.squareup.retrofit2", version: "2.9.0") {
                entry("converter-jackson")
                entry("retrofit")
            }
            dependencySet(group: "io.jsonwebtoken", version: "0.11.5") {
                entry("jjwt-api")
                entry("jjwt-impl")
                entry("jjwt-jackson")
            }
        }
    }

    dependencies {
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
        // http://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor

        testImplementation("com.google.guava:guava")
        testImplementation("com.github.stefanbirkner:system-lambda")
        testImplementation("com.github.tomakehurst:wiremock-jre8")
        testImplementation("org.hibernate.validator:hibernate-validator")
        testImplementation("org.springframework.boot:spring-boot-starter-test") // MockHttpServletRequest
        testImplementation("org.springframework.boot:spring-boot-starter-logging")
    }

    compileJava.dependsOn(processResources)
    // http://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor

    jar {
        manifest {
            attributes "Implementation-Title": project.name,
                "Implementation-Version": archiveVersion
        }
    }

    lombok {
        version = "1.18.22"
    }

    if (!project.name.startsWith("sample-") && !project.name.startsWith("test-")) {
        task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
            ext.outputDir = file("$buildDir/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each {
                inputs.dir(it)
                args(it, "-d", outputDir)
            }
        }

        javadoc {
            dependsOn(delombok)
            source = delombok.outputDir
            options.encoding = "UTF-8"
            options.locale = "en_US"
            options.addStringOption("Xdoclint:none", "-quiet")
            // To create javadoc for generated method&constructor, delombok & run javadoc on delombok.outputDir.
        }

        task javadocJar(type: Jar, dependsOn: "javadoc") {
            archiveClassifier.set("javadoc")
            from(javadoc.destinationDir)
        }

        task sourcesJar(type: Jar, dependsOn: "classes") {
            archiveClassifier.set("sources")
            from(sourceSets.main.allSource)
        }

        artifacts {
            archives(javadocJar, sourcesJar)
        }
    }

    checkstyle {
        configProperties = [projectDir: rootProject.projectDir]
        toolVersion = "8.23"
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml {
                enabled = false
            }
            html {
                enabled = false
            }
        }
        excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
    }

    compileJava {
        options.compilerArgs << "-Xlint:all" << "-Xlint:deprecation" << "-Werror" << "-Xlint:-processing" << "-parameters"
        options.encoding = "UTF-8"
    }
    compileTestJava {
        options.encoding = "UTF-8"
    }

    test {
        useJUnitPlatform()
        testLogging {
            // Make sure output from standard out or error is shown in Gradle output.
            showStandardStreams true
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat TestExceptionFormat.FULL
        }
    }

    project.plugins.withType(SpringBootPlugin) {
        bootRun {
            systemProperties System.properties
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    onlyIf = { true }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    [":line-bot-api-client", ":line-bot-model", ":line-bot-servlet", ":line-bot-spring-boot", ":line-bot-cli"].each {
        sourceSets(project(it).sourceSets.main)
    }

    reports {
        xml.enabled true
        xml.destination file("reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

[":line-bot-api-client", ":line-bot-model", "line-bot-parser", ":line-bot-servlet", ":line-bot-spring-boot", ":line-bot-cli"].each { projectName ->
    project(projectName) { project ->
        apply(plugin: "jacoco")
        apply(plugin: "signing")
        apply(plugin: "maven-publish")

        java {
            withJavadocJar()
            withSourcesJar()
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from(components.java)

                    pom {
                        name = project.name
                        packaging = "jar"
                        if (project.description) {
                            description = project.description
                        } else {
                            description = "LINE Bot SDK Java - " + project.name
                        }
                        url = "https://github.com/line/line-bot-sdk-java"

                        scm {
                            url = "scm:git@github.com:line/line-bot-sdk-java.git"
                            connection = "scm:git@github.com:line/line-bot-sdk-java.git"
                            developerConnection = "scm:git@github.com:line/line-bot-sdk-java.git"
                        }
                        licenses {
                            license {
                                name = "Apache"
                                url = "https://opensource.org/licenses/Apache-2.0"
                            }
                        }
                        developers {
                            developer {
                                id = "tokuhirom"
                                name = "Tokuhiro Matsuno"
                                email = "tokuhirom@gmail.com"
                            }
                            developer {
                                id = "kazuki-ma"
                                name = "Kazuki MATSUDA"
                                email = "matsuda.kazuki@gmail.com"
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    url sonatypeRepositoryUrl
                    if (project.hasProperty("sonatypeUsername")) {
                        credentials {
                            username = "${sonatypeUsername}"
                            password = "${sonatypePassword}"
                        }
                    }
                }
            }
        }

        signing {
            required { isReleaseBuild }
            sign(publishing.publications.mavenJava)
        }
    }
}
