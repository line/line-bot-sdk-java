{{>licenseInfo}}

package {{package}};

import static org.assertj.core.api.Assertions.assertThat;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.configureFor;
import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
import static com.github.tomakehurst.wiremock.client.WireMock.put;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.delete;
import static com.github.tomakehurst.wiremock.client.WireMock.putRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathTemplate;
import static com.github.tomakehurst.wiremock.client.WireMock.verify;
import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;

import com.linecorp.bot.client.base.BlobContent;
import com.linecorp.bot.client.base.UploadFile;

import java.net.URI;

import java.util.Map;

{{#mockMessage}}
import com.linecorp.bot.messaging.model.TextMessage;
{{/mockMessage}}

{{#imports}}import {{import}};
{{/imports}}
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.slf4j.bridge.SLF4JBridgeHandler;

import com.ocadotechnology.gembus.test.Arranger;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import com.github.tomakehurst.wiremock.WireMockServer;

/**
* API tests for {{classname}}
*/
@Timeout(5)
public class {{classname}}Test {
    static {
        SLF4JBridgeHandler.removeHandlersForRootLogger();
        SLF4JBridgeHandler.install();
    }

    private WireMockServer wireMockServer;
    private {{classname}} api;

    @BeforeEach
    public void setUp() {
        wireMockServer = new WireMockServer(wireMockConfig().dynamicPort());
        wireMockServer.start();
        configureFor("localhost", wireMockServer.port());


        api = {{classname}}.builder({{#authenticated}}"MY_OWN_TOKEN"{{/authenticated}})
            .apiEndPoint(URI.create(wireMockServer.baseUrl()))
            .build();
    }

    @AfterEach
    public void tearDown() {
        wireMockServer.stop();
    }

{{#operations}}
    {{#operation}}
    @Test
    public void {{operationId}}Test() {
        stubFor({{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(urlPathTemplate("{{{path}}}")).willReturn(
            aResponse()
                .withStatus(200)
                .withHeader("content-type", "application/json")
                .withBody("{}")));

        {{#allParams}}
        {{#isFile}}
            UploadFile {{paramName}} = UploadFile.fromString("HELLO_FILE", "text/plain");
        {{/isFile}}
        {{^isFile}}
            {{{dataType}}} {{paramName}} = Arranger.some({{dataType}}.class{{#mockMessage}}, Map.of("message", () -> new TextMessage("hello"), "recipient", () -> null, "filter", () -> null){{/mockMessage}});
        {{/isFile}}
        {{/allParams}}

        {{#returnType}}{{#isResponseFile}}BlobContent{{/isResponseFile}}{{^isResponseFile}}{{{.}}}{{/isResponseFile}} response = {{/returnType}}api.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}).join().body();

        {{#returnType}}
        assertThat(response).isNotNull();
        {{/returnType}}
        // TODO: test validations
    }

    {{/operation}}
{{/operations}}
}
