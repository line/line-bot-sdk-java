/*
 * Copyright 2023 LINE Corporation
 *
 * LINE Corporation licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.linecorp.bot.webhook.model;



import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * ScenarioResult
 *
 * @see <a href="https://developers.line.biz/en/reference/messaging-api/#scenario-result-event">
 *     Documentation</a>
 */
@JsonInclude(Include.NON_NULL)
@javax.annotation.Generated(value = "com.linecorp.bot.codegen.LineJavaCodegenGenerator")
public record ScenarioResult(
    /** Scenario ID executed */
    @JsonProperty("scenarioId") String scenarioId,
    /** Revision number of the scenario set containing the executed scenario */
    @JsonProperty("revision") Integer revision,
    /** Timestamp for when execution of scenario action started (milliseconds, LINE app time) */
    @JsonProperty("startTime") Long startTime,
    /** Timestamp for when execution of scenario was completed (milliseconds, LINE app time) */
    @JsonProperty("endTime") Long endTime,
    /** Scenario execution completion status */
    @JsonProperty("resultCode") String resultCode,
    /**
     * Execution result of individual operations specified in action. Only included when
     * things.result.resultCode is success.
     */
    @JsonProperty("actionResults") List<ActionResult> actionResults,
    /** Data contained in notification. */
    @JsonProperty("bleNotificationPayload") String bleNotificationPayload,
    /** Error reason. */
    @JsonProperty("errorReason") String errorReason) {

  public static class Builder {
    private String scenarioId;

    private Integer revision;

    private Long startTime;

    private boolean startTime$set;

    private Long endTime;

    private boolean endTime$set;

    private String resultCode;

    private boolean resultCode$set;

    private List<ActionResult> actionResults;

    private String bleNotificationPayload;

    private String errorReason;

    public Builder() {}

    public Builder scenarioId(String scenarioId) {
      this.scenarioId = scenarioId;

      return this;
    }

    public Builder revision(Integer revision) {
      this.revision = revision;

      return this;
    }

    public Builder startTime(Long startTime) {
      this.startTime = startTime;

      this.startTime$set = true;

      return this;
    }

    public Builder endTime(Long endTime) {
      this.endTime = endTime;

      this.endTime$set = true;

      return this;
    }

    public Builder resultCode(String resultCode) {
      this.resultCode = resultCode;

      this.resultCode$set = true;

      return this;
    }

    public Builder actionResults(List<ActionResult> actionResults) {
      this.actionResults = actionResults;

      return this;
    }

    public Builder bleNotificationPayload(String bleNotificationPayload) {
      this.bleNotificationPayload = bleNotificationPayload;

      return this;
    }

    public Builder errorReason(String errorReason) {
      this.errorReason = errorReason;

      return this;
    }

    public ScenarioResult build() {

      if (!this.startTime$set) {
        throw new IllegalStateException("'startTime' must be set for ScenarioResult.");
      }

      if (!this.endTime$set) {
        throw new IllegalStateException("'endTime' must be set for ScenarioResult.");
      }

      if (!this.resultCode$set) {
        throw new IllegalStateException("'resultCode' must be set for ScenarioResult.");
      }

      return new ScenarioResult(
          scenarioId,
          revision,
          startTime,
          endTime,
          resultCode,
          actionResults,
          bleNotificationPayload,
          errorReason);
    }
  }
}
